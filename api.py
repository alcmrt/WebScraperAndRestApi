"""
api module for serving MySQL data as JSON Object by using
Flask Rest library.
"""

from flask import Flask, jsonify, request
from flask_restful import Resource, Api
from peewee import MySQLDatabase
from models import Car
import settings as s

app = Flask(__name__)
database = MySQLDatabase(database=s.SCHEMA, user=s.USER, password=s.PASSWORD, host=s.HOST, port=s.PORT)
api = Api(app)

# This hook ensures that a connection is opened to handle any queries
# generated by the request.
@app.before_request
def _db_connect():
    database.connect()

# This hook ensures that the connection is closed when we've finished
# processing the request.
@app.teardown_request
def _db_close(exc):
    if not database.is_closed():
        database.close()


class GetCarList(Resource):
    """For getting data of cars from MySQL Database"""

    def get(self):
        # get request parameters
        parameters = request.args

        # extract parameters from request
        brand = parameters.get("brand", None)
        ext_color = parameters.get("extcolor", None)
        int_color = parameters.get("intcolor", None)
        year = parameters.get("year", None)
        transmission = parameters.get("trans", None)

        query = Car.select()  # select all cars

        # update query due to request parameters
        if brand is not None:
            query = query.where(Car.brand == brand)
        if ext_color is not None:
            query = query.where(Car.ext_color == ext_color)
        if int_color is not None:
            query = query.where(Car.int_color == int_color)
        if year is not None:
            query = query.where(Car.year == year)
        if transmission is not None:
            query = query.where(Car.transmission == transmission)

        # return list of desired cars as JSON Object
        return jsonify(list(query.dicts()))


# Setup the Api resource routing here
api.add_resource(GetCarList, '/cars/list/')

if __name__ == '__main__':
    app.run(debug=False)